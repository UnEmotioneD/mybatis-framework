<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 현재 mapper 파일을 식별할 수 있는 이름을 지정해준다 -->
<mapper namespace="member">
	<!-- html == 사용자가 볼수 있게 해줌 -->
	<!-- xml == 데이터를 저장하는 목적으로 사용 -->

	<!-- 
		[표현식]
		
		<SQL 종류
		id = "현제 mapper.xml 에서 각 SQL 을 식별할 수 있는 값"
		parameterType="DAO 에서 SQL 호출하여 전달한 파라미터의 자료형"
		resultType="SQL 수행결과를 저장할 JAVA 자료형">
		
		실제 수행할 SQL
		</SQL 종류>
		
		[특징]
		1) SELECT 결과의 각 컬럼 값을, JAVA 객체 변수병과 일치 시키면 자동으로 값이 지정된다
		2) 전달된 파라미터(Mapper 객체)를 SQL에 바이딩 하기위해 #{필드명} 를 사용한다
			-> #{memberId} -> 'user01'
			-> #{memberPw} -> '1234'

			차이점 : 문자열로 치환할지 값 자체로 바꿀지
			-> ${memberId} -> user01 (작은 따옴표가 붙지 않음, SQL injection 보안상 권장되지 않음)

			!!! "$" 를 이용해서 테이블명, 컬럼명을 동적으로 바꿀 수 있다 !!!
			
		3) SQL 문 마지막에 semi-colon(;) 은 작성 하지 않는다
		4) parameterType 에서 별칭을 사용할려면 mybatis-config.xml 에서 typeAliases 설정을 해야함
	-->

	<!-- src/main/java 까지는 기본으로 잡힘 -->
	<!-- resultType == 실행 결과를 Member 객체로 묶어서 보낸다 -->
	
	<select id="selectOneMember"
		parameterType="member"
		resultType="member">
		select
			member_no    as "memberNo",
			member_id    as "memberId",
			member_pw    as "memberPW",
			member_name  as "memberName",
			member_email as "memberEmail",
			member_phone as "memberPhone",
			member_addr  as "memberAddr",
			member_level as "memberLevel",
			enroll_date  as "enrollDate"
		from tbl_member
		where member_id = #{memberId}
		and member_pw = #{memberPw}
	</select>
	
	<!-- 회원 정보 등록
		INSERT 의 결과는 항상 정수값이므로 resultType 생략
	-->
	<insert id="insertMember"
		parameterType="member">
		insert into tbl_member 
		(
			member_no, 
			member_id, 
			member_pw, 
			member_name, 
			member_email, 
			member_phone, 
			member_addr,
			member_level, 
			enroll_date
		) 
		values 
		(
			seq_member.nextval,
			#{memberId},
			#{memberPw},
			#{memberName},
			#{memberEmail},
			#{memberPhone},
			#{memberAddr},
			default,
			sysdate
		)
	</insert>
	
	<!-- 전달 받는 파라미터가 없음 -->
	<!-- resultType : 리스트로 반환되는 객체 자료형 -->
	<select id="selectAllMember"
	resultType="member">
	select 
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		enroll_date  as "enrollDate"
	from tbl_member
	order by 1
	</select>
	
	<update id="updateMember"
	parameterType="member">
	update tbl_member
		set
			member_pw =    #{memberPw}, 
			member_name =  #{memberName},
			member_email = #{memberEmail},
			member_phone = #{memberPhone},
			member_addr =  #{memberAddr}
	where member_no =      #{memberNo}
	</update>

	<!-- 
		자료형  |  mybatis 자료형
		=====================
		int    |  _int
		short  |  _short
		byte   |  _byte
		float  |  _float
		double |  _double
		
		String |  string
		Map    |  map
		Hash   |  hashmap (map 이라고 작성해도 동작한다)
		Date   |  date
	-->

	<delete id="deleteMember"
	parameterType="string">
	delete from tbl_member where member_no = #{_string}
	</delete>
	
	<!-- 전체 회원 조회(페이징)
	DAO 에서 전달한 파라미터 자료형이, HashMap 일 떄
	parameterType 에 map 또는 hashmap 적성
	 -->
	<select id="selectAllMemberPage"
	parameterType="map"
	resultType="member">
    select 
        member_no    as memberNo,
        member_id    as memberId,
        member_pw    as memberPw,
        member_name  as memberName,
        member_email as memberEmail,
        member_phone as memberPhone,
        member_addr  as memberAddr,
        member_level as memberLevel,
        enroll_date  as enrollDate
    from (
        select rownum as rnum, a.*
        from (
            select
                member_no,
                member_id,
                member_pw,
                member_name,
                member_email,
                member_phone,
                member_addr,
                member_level,
                enroll_date
            from tbl_member
            order by 1
        ) a
    ) a
    where rnum between #{start} and #{end}
	</select>
	
	<select id="selectTotalCount"
	resultType="_int">
	select count(*) from tbl_member
	</select>
	
	<update id="chgMemberLevel"
	parameterType="member">
	update tbl_member
		set member_level = #{memberLevel}
	where member_no = #{memberNo}
	</update>

	<select id="selDynamicIfTest"
	parameterType="member"
	resultType="member">
	select
		<if test="sFlag1 != null and sFlag1 == 'on'">
		member_no    as "memberNo",
		</if>
		<if test="sFlag2 != null and sFlag2 == 'on'">
		member_id    as "memberId",
		</if>
		<if test="sFlag3 != null and sFlag3 == 'on'">
		member_name  as "memberName",
		</if>
		<if test="sFlag4 != null and sFlag4 == 'on'">
		member_email as "memberEmail",
		</if>
		<if test="sFlag5 != null and sFlag5 == 'on'">
		member_phone as "memberPhone",
		</if>
		<!-- (,) 때문에 SQL 오류가 발생하니까 임의의 literal 값을 쿼리한다 -->
		'a'
		<!-- select 'a' from tbl_member 를 해도 결과는 'A' 컬럼에 데이터는 a 로 조회 된다 -->
		<!-- 바인딩이 되지 않는 데이터는 그냥 안되는대로 오류가 방생하지 않는다 -->
	from tbl_member
	</select>
	
	<!-- 
	DAO -> XML argument type : String array
	
	collection : 전달된 파라미터 자료형(배열 : array, List : list)
	item : foreach 태그 내에서 사용할 요소의 임의 명칭
	open : 첫 요소값 삽입 이전에 삽입할 값
	separator : 각 요소들을 구분할 구분자 값
	close : 마지막 요소값 삽입 후 삽입할 값
	 -->
	<select id="selDynamicForTest"
	parameterType="map"
	resultType="member">
	select
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		enroll_date  as "enrollDate"
	from tbl_member
	where member_id in
	<foreach collection="array" item="id" open="(" separator="," close=")">
	#{id}
	</foreach>
	</select>
	
	<!--
		select == 'id' == 입력한 keyword 와 일치하는 아이디
		select == 'name' == 입력한 keyword 를 포함하는 이름
	 -->
	<select id="selDynamicChooseTest"
	parameterType="map"
	resultType="member">
	select
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		enroll_date  as "enrollDate"
	from tbl_member
	<choose>
		<when test="select != null and select == 'id'">
		where member_id = #{keyword}
		</when>
		<!-- otherwise 를 작성하는거보다 when 을 쓰는게 안정성이 높음 -->
		<when test="select != null and select == 'name'">
		where member_name like '%' || #{keyword} || '%'
		</when>
	</choose>
	</select>
	
	<!-- 
		서울, 경기, 부산, 목표 페크박스를 생성하고, 체크한 지역에 거주하는 회원 리스트 조회
		첫번째 작성되는 조건식 앞에 'where' 절이 자동으로 삽입된다
	 -->
	<select id="selDynamicTest1"
	parameterType="member"
	resultType="member">
	select
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		enroll_date  as "enrollDate"
	from tbl_member
	<!-- 제일 앞에 'where' 를 자동으로 입력해 준다 -->
	<where>
		<if test="sFlag1 != null and sFlag1 != ''">
		or member_addr like '%'|| #{sFlag1} ||'%'
		</if>
		<if test="sFlag2 != null and sFlag2 != ''">
		or member_addr like '%'|| #{sFlag2} ||'%'
		</if>
		<if test="sFlag3 != null and sFlag3 != ''">
		or member_addr like '%'|| #{sFlag3} ||'%'
		</if>
		<if test="sFlag4 != null and sFlag4 != ''">
		or member_addr like '%'|| #{sFlag4} ||'%'
		</if>
	</where>
	</select>
	
	<select id="selDynamicTest2"
	parameterType="string"
	resultType="member">
	select
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		<if test="sFlag1 != null and sFlag1 == 'selected'">
		level_name   as "levelName",
		</if>
		enroll_date  as "enrollDate"
	from tbl_member
		<if test="sFlag1 != null and sFlag1 == 'selected'">
		join tbl_level on (member_level = level_code)
		</if>
	</select>
	
	<select id="selDynamicTest3"
	parameterType="member"
	resultType="member">
	select
		member_no    as "memberNo",
		member_id    as "memberId",
		member_pw    as "memberPw",
		member_name  as "memberName",
		member_email as "memberEmail",
		member_phone as "memberPhone",
		member_addr  as "memberAddr",
		member_level as "memberLevel",
		enroll_date  as "enrollDate"
	from tbl_member
	<if test="sFlag1 != null and sFlag1 != ''">
		<if test="sFlag2 != null and sFlag2 != ''">
		where ${sFlag1} like '%'|| #{sFlag2} ||'%'
		</if>
	order by ${sFlag1}
	</if>
	</select>
	
</mapper>
